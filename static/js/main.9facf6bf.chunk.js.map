{"version":3,"sources":["LabeledColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["LabeledColorPicker","title","color","setColor","Box","display","flexDirection","alignItems","marginRight","marginLeft","Typography","value","onChange","newColor","css","backgroundColor","App","useState","percentage","setPercentage","chartBackgroundColor","setChartBackgroundColor","labelColor","setLabelColor","setTitle","fontSize","setFontSize","setBackgroundColor","font","setFont","size","setSize","showPercentage","setShowPercentage","width","paddingTop","style","paddingBottom","fontFamily","fontWeight","marginBottom","height","data","key","reveal","lineWidth","startAngle","label","labelStyle","fill","labelPosition","background","rounded","animate","justifyContent","marginTop","flexWrap","TextField","type","e","val","parseInt","target","Number","isInteger","Autocomplete","event","newValue","options","renderInput","params","FormControlLabel","control","Checkbox","checked","labelPlacement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9facf6bf.chunk.js","sourcesContent":["import { Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport { ColorPicker } from \"material-ui-color\";\nimport React from \"react\";\n\nexport default function LabeledColorPicker({ title, color, setColor }) {\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"flex-start\"\n      marginRight=\"20px\"\n      marginLeft=\"20px\"\n    >\n      <Typography>{title}</Typography>\n      <ColorPicker\n        value={color}\n        onChange={(newColor) => {\n          if (newColor.css) {\n            setColor(newColor.css.backgroundColor);\n          } else {\n            setColor(newColor);\n          }\n        }}\n      />\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport {\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport LabeledColorPicker from \"./LabeledColorPicker\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nfunction App() {\n  const [percentage, setPercentage] = useState(74);\n  const [color, setColor] = useState(\"#008080\");\n  const [chartBackgroundColor, setChartBackgroundColor] = useState(\"#bfbfbf\");\n  const [labelColor, setLabelColor] = useState(\"#008080\");\n  const [title, setTitle] = useState(\"Título\");\n  const [fontSize, setFontSize] = useState(50);\n  const [backgroundColor, setBackgroundColor] = useState(\"white\");\n  const [font, setFont] = useState(\"Roboto\");\n  const [size, setSize] = useState(500);\n  const [showPercentage, setShowPercentage] = useState(true);\n\n  return (\n    <Box\n      width=\"100%\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      paddingTop=\"50px\"\n      style={{ backgroundColor: backgroundColor, paddingBottom: \"8px\" }}\n    >\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <Typography\n          style={{\n            fontFamily: font,\n            fontSize: `${fontSize}px`,\n            fontWeight: \"bold\",\n            marginBottom: \"20px\",\n          }}\n        >\n          {title}\n        </Typography>\n        <Box width={`${size}px`} height={`${size}px`}>\n          <PieChart\n            data={[{ value: 1, key: 1, color: color }]}\n            reveal={percentage}\n            lineWidth={20}\n            startAngle={270}\n            label={() => `${percentage}` + (showPercentage ? \"%\" : \"\")}\n            labelStyle={{\n              fontSize: \"25px\",\n              fontFamily: \"sans-serif\",\n              fill: labelColor,\n            }}\n            labelPosition={0}\n            background={chartBackgroundColor}\n            rounded\n            animate\n          />\n        </Box>\n      </Box>\n\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        marginTop=\"100px\"\n        flexWrap=\"wrap\"\n      >\n        <TextField\n          label=\"Percentual\"\n          type=\"number\"\n          value={percentage}\n          onChange={(e) => {\n            let val = parseInt(e.target.value);\n            if (Number.isInteger(val)) {\n              setPercentage(val);\n            } else if (e.target.value === \"\") {\n              setPercentage(0);\n            }\n          }}\n          style={{ marginLeft: \"20px\", marginRight: \"20px\" }}\n        />\n        <TextField\n          label=\"Título\"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value);\n          }}\n          style={{ marginLeft: \"20px\", marginRight: \"20px\" }}\n        />\n        <TextField\n          label=\"Lado do círculo (px)\"\n          type=\"number\"\n          value={size}\n          onChange={(e) => {\n            let val = parseInt(e.target.value);\n            if (Number.isInteger(val)) {\n              setSize(parseInt(val));\n            } else if (e.target.value === \"\") {\n              setSize(0);\n            }\n          }}\n          style={{ marginLeft: \"20px\", marginRight: \"20px\" }}\n        />\n        <TextField\n          label=\"Tamanho da fonte (px)\"\n          type=\"number\"\n          value={fontSize}\n          onChange={(e) => {\n            let val = parseInt(e.target.value);\n            if (Number.isInteger(val)) {\n              setFontSize(parseInt(val));\n            } else if (e.target.value === \"\") {\n              setFontSize(0);\n            }\n          }}\n          style={{ marginLeft: \"20px\", marginRight: \"20px\" }}\n        />\n        <Autocomplete\n          value={font}\n          onChange={(event, newValue) => {\n            setFont(newValue);\n          }}\n          options={[\n            \"Roboto\",\n            \"Helvetica\",\n            \"Open Sans\",\n            \"Lato\",\n            \"Ubuntu\",\n            \"Sans-Serif\",\n          ]}\n          renderInput={(params) => <TextField label=\"Fonte\" {...params} />}\n          style={{ marginLeft: \"20px\", marginRight: \"20px\", width: \"179px\" }}\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={showPercentage}\n              color=\"primary\"\n              onChange={() => setShowPercentage(!showPercentage)}\n            />\n          }\n          label='Mostrar \"%\"'\n          labelPlacement=\"top\"\n        />\n      </Box>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        marginTop=\"20px\"\n        flexWrap=\"wrap\"\n      >\n        <LabeledColorPicker\n          title=\"Cor da linha\"\n          color={color}\n          setColor={setColor}\n        />\n        <LabeledColorPicker\n          title=\"Cor da trilha\"\n          color={chartBackgroundColor}\n          setColor={setChartBackgroundColor}\n        />\n        <LabeledColorPicker\n          title=\"Cor do rótulo\"\n          color={labelColor}\n          setColor={setLabelColor}\n        />\n        <LabeledColorPicker\n          title=\"Cor do fundo\"\n          color={backgroundColor}\n          setColor={setBackgroundColor}\n        />\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}